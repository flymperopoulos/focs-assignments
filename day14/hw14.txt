# FOCS Fall 2016 Homework 14

You may edit your answers into this file, or add a separate file in the same directory.

If you add a separate file, please include the following at the top.
In either case, add your name and check one of the boxes.

Student Name: Filippos Lymperopoulos
Check one:
[*] I completed this assignment without assistance or external resources.
[ ] I completed this assignment with assistance from ___
    and/or using these external resources: ___

I. Math

In the following problems, we will look at how rapidly different functions grow.  We are interested in figuring out when two functions grow at the same rate.  Our definition of “the same” is:  f(n) grows no faster than g(n) if there is some minimum value for the argument (we’ll call it n0) after which f(n) is no larger than a constant multiple of g(n) -- call it k*g(n).  For example, if f(n) is 367n+1098 and g(n) is 2n, n0 could be 40 and k could be 200:  367n+1098 <= 200*2n for n>40.

For each of the following pairs of functions, identify a multiplier and a minimum value of n for which the first is no larger than the specified multiple of the second.  If you cannot -- if there are no such values -- explain why not.


  A. 367n+1098     and     2n                  [n0 = 40; k=200]
  B. n^2 + 2n + 6    and     6n^2 - 25         [n0=3; k=1] 
  C. n^3 + n^2 - 2n     and     6n^2 - 25      [no values applicable - n^3 has a higher order than n^2]
  D. 869,438    and    923                     [any value of n0 and k, i.e. n0=2; k=1020]
  E. 2^n    and    3^n                         [n0=0; k=1]
  F. 3^n    and    2^n                         [no values applicable - again higher growth by 3^n compared to 2^n]
  G. log_2 n     and    log_10 n               [n0=1; k=5]
  H. log_10 n^2    and     log_2 n             [n0=0; k=1]


II. Linear data structures

For the following problem, assume that it costs 1 unit to access a structure -- an item in an array, a field in a record you are holding, the first element in a linked list -- whether reading or writing that element.  [Accessing the second element in a linked list costs 2 units if you have a pointer to the list:  1 unit to access the first element/read its “next” pointer, and another unit to access the second element.]

Assume that you have n elements stored in an array and the same n elements stored in a linked list; you have no other references to these data structures.  You may assume that n > 10.  How much does it cost to perform each of the following actions?

  A. Read the value of the first element in the array? In the list?
     array: 1
     list: 1
  B. Read the value of the seventh element in the array? In the list?
     array: 1
     list: 7
  C. Add an element to the array? [Where is the cheapest place to add it?] To the list? [Where is the cheapest place to add it?].
     array: n (cheapest at the end)
     list: 1 (head/start of the list)
  D. Delete the fifth element from the array? From the list?
     array: n-5 (shift everything after the 5th element by one back)
     list: 5
  E. Confirm that a particular element -- say x -- is present in the array? In the list?
     array: n
     list: n
  F. Confirm that a particular element -- say y -- is NOT present in the array? In the list?
     array: n
     list: n

Now assume that you can maintain one extra piece of storage for the data structure.  In the case of the array, you may want to maintain a length reference.

In the case of the linked list, what would be similarly helpful? [Maintain a pointer to the last element in the list ]
G. How much would it cost now to add an element to the end of the array? 0 To add an element to the end of the list? n
    array: 1
    list: 1 (by pointing the last element to the new element)
H. How much would it cost now to delete an element from the array?  From the list?  What if it were the final element?  The penultimate element? 
    array: n
    list: n 
    final in array: 1
    final in list: 1
    penultimate in array: n
    penultimate in list: n

Finally, assume that both the array and the linked list are sorted, i.e., that their elements are in some predictable order (say, comparable by < or <=).
J. How much would it cost to confirm that a particular element -- say x -- is present in the array? In the list? To confirm that a particular element -- say y -- is not present in the array? In the list?
    present in array: log(n) (go to middle element and then do the same left or right)
    present in list: n 
    not present in array: log(n)
    not present in list: n
